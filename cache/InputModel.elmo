Elm.InputModel = Elm.InputModel || {};
Elm.InputModel.make = function (_elm) {
   "use strict";
   _elm.InputModel = _elm.InputModel || {};
   if (_elm.InputModel.values)
   return _elm.InputModel.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _E = _N.Error.make(_elm),
   $moduleName = "InputModel";
   var Basics = Elm.Basics.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var Keyboard = Elm.Keyboard.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Native = Native || {};
   Native.Json = Elm.Native.Json.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Time = Elm.Time.make(_elm);
   var _op = {};
   var Input = F2(function (a,b) {
      return {_: {}
             ,timeDelta: a
             ,userInput: b};
   });
   var UserInput = function (a) {
      return {_: {}
             ,tilePushDirection: a};
   };
   var Right = {ctor: "Right"};
   var Left = {ctor: "Left"};
   var Down = {ctor: "Down"};
   var Up = {ctor: "Up"};
   var arrowsDirection = function () {
      var toDirection = F2(function (ds,
      wasds) {
         return _U.eq(ds,
         {_: {}
         ,x: 0
         ,y: 1}) ? Maybe.Just(Up) : _U.eq(ds,
         {_: {}
         ,x: 0
         ,y: -1}) ? Maybe.Just(Down) : _U.eq(ds,
         {_: {}
         ,x: 1
         ,y: 0}) ? Maybe.Just(Right) : _U.eq(ds,
         {_: {}
         ,x: -1
         ,y: 0}) ? Maybe.Just(Left) : _U.eq(wasds,
         {_: {}
         ,x: 0
         ,y: 1}) ? Maybe.Just(Up) : _U.eq(wasds,
         {_: {}
         ,x: 0
         ,y: -1}) ? Maybe.Just(Down) : _U.eq(wasds,
         {_: {}
         ,x: 1
         ,y: 0}) ? Maybe.Just(Right) : _U.eq(wasds,
         {_: {}
         ,x: -1
         ,y: 0}) ? Maybe.Just(Left) : Maybe.Nothing;
      });
      return A2(Signal._op["~"],
      A2(Signal._op["<~"],
      toDirection,
      Keyboard.arrows),
      Keyboard.wasd);
   }();
   var userInput = A2(Signal._op["<~"],
   function (d) {
      return {_: {}
             ,tilePushDirection: d};
   },
   arrowsDirection);
   _elm.InputModel.values = {_op: _op
                            ,arrowsDirection: arrowsDirection
                            ,userInput: userInput
                            ,Up: Up
                            ,Down: Down
                            ,Left: Left
                            ,Right: Right
                            ,UserInput: UserInput
                            ,Input: Input};
   return _elm.InputModel.values;
};